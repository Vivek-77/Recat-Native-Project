{"version":3,"sources":["NativeStackView.tsx"],"names":["React","Platform","StyleSheet","View","AppContainer","StackActions","useTheme","SafeAreaProviderCompat","Screen","ScreenStack","useSafeAreaInsets","warnOnce","HeaderConfig","isAndroid","OS","Container","process","env","NODE_ENV","DebugContainer","props","stackPresentation","rest","MaybeNestedStack","options","route","presentation","children","colors","headerShown","contentStyle","isHeaderInModal","headerShownPreviousRef","useRef","useEffect","current","name","content","styles","container","backgroundColor","background","absoluteFill","NativeStackViewInner","state","navigation","descriptors","insets","routes","map","index","render","renderScene","key","gestureEnabled","animationTypeForReplace","animation","isHeaderInPush","emit","type","data","closing","target","dispatch","pop","source","headerTopInsetEnabled","top","NativeStackView","create","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet, View, ViewProps } from 'react-native';\n// @ts-ignore Getting private component\nimport AppContainer from 'react-native/Libraries/ReactNative/AppContainer';\nimport {\n  ParamListBase,\n  StackActions,\n  StackNavigationState,\n  useTheme,\n  Route,\n} from '@react-navigation/native';\nimport { SafeAreaProviderCompat } from '@react-navigation/elements';\nimport {\n  Screen,\n  ScreenStack,\n  StackPresentationTypes,\n} from 'react-native-screens';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport warnOnce from 'warn-once';\nimport HeaderConfig from './HeaderConfig';\nimport type {\n  NativeStackDescriptorMap,\n  NativeStackNavigationHelpers,\n  NativeStackNavigationOptions,\n} from '../types';\n\nconst isAndroid = Platform.OS === 'android';\n\ntype ContainerProps = ViewProps & { stackPresentation: StackPresentationTypes };\n\nlet Container = (View as unknown) as React.ComponentType<ContainerProps>;\n\nif (process.env.NODE_ENV !== 'production') {\n  const DebugContainer = (props: ContainerProps) => {\n    const { stackPresentation, ...rest } = props;\n\n    if (Platform.OS === 'ios' && stackPresentation !== 'push') {\n      // This is necessary for LogBox\n      return (\n        <AppContainer>\n          <View {...rest} />\n        </AppContainer>\n      );\n    }\n\n    return <View {...rest} />;\n  };\n\n  Container = DebugContainer;\n}\n\nconst MaybeNestedStack = ({\n  options,\n  route,\n  presentation,\n  children,\n}: {\n  options: NativeStackNavigationOptions;\n  route: Route<string>;\n  presentation: Exclude<StackPresentationTypes, 'push'> | 'card';\n  children: React.ReactNode;\n}) => {\n  const { colors } = useTheme();\n  const { headerShown = true, contentStyle } = options;\n\n  const isHeaderInModal = isAndroid\n    ? false\n    : presentation !== 'card' && headerShown === true;\n\n  const headerShownPreviousRef = React.useRef(headerShown);\n\n  React.useEffect(() => {\n    warnOnce(\n      !isAndroid &&\n        presentation !== 'card' &&\n        headerShownPreviousRef.current !== headerShown,\n      `Dynamically changing 'headerShown' in modals will result in remounting the screen and losing all local state. See options for the screen '${route.name}'.`\n    );\n\n    headerShownPreviousRef.current = headerShown;\n  }, [headerShown, presentation, route.name]);\n\n  const content = (\n    <Container\n      style={[\n        styles.container,\n        presentation !== 'transparentModal' &&\n          presentation !== 'containedTransparentModal' && {\n            backgroundColor: colors.background,\n          },\n        contentStyle,\n      ]}\n      stackPresentation={presentation === 'card' ? 'push' : presentation}\n    >\n      {children}\n    </Container>\n  );\n\n  if (isHeaderInModal) {\n    return (\n      <ScreenStack style={styles.container}>\n        <Screen enabled style={StyleSheet.absoluteFill}>\n          <HeaderConfig {...options} route={route} />\n          {content}\n        </Screen>\n      </ScreenStack>\n    );\n  }\n\n  return content;\n};\n\ntype Props = {\n  state: StackNavigationState<ParamListBase>;\n  navigation: NativeStackNavigationHelpers;\n  descriptors: NativeStackDescriptorMap;\n};\n\nfunction NativeStackViewInner({ state, navigation, descriptors }: Props) {\n  const insets = useSafeAreaInsets();\n\n  return (\n    <ScreenStack style={styles.container}>\n      {state.routes.map((route, index) => {\n        const { options, render: renderScene } = descriptors[route.key];\n        const {\n          gestureEnabled,\n          headerShown,\n          animationTypeForReplace = 'pop',\n          animation,\n        } = options;\n\n        let { presentation = 'card' } = options;\n\n        if (index === 0) {\n          // first screen should always be treated as `card`, it resolves problems with no header animation\n          // for navigator with first screen as `modal` and the next as `card`\n          presentation = 'card';\n        }\n\n        const isHeaderInPush = isAndroid\n          ? headerShown\n          : presentation === 'card' && headerShown !== false;\n\n        return (\n          <Screen\n            key={route.key}\n            enabled\n            style={StyleSheet.absoluteFill}\n            gestureEnabled={\n              isAndroid\n                ? // This prop enables handling of system back gestures on Android\n                  // Since we handle them in JS side, we disable this\n                  false\n                : gestureEnabled\n            }\n            replaceAnimation={animationTypeForReplace}\n            stackPresentation={presentation === 'card' ? 'push' : presentation}\n            stackAnimation={animation}\n            onWillAppear={() => {\n              navigation.emit({\n                type: 'transitionStart',\n                data: { closing: false },\n                target: route.key,\n              });\n            }}\n            onWillDisappear={() => {\n              navigation.emit({\n                type: 'transitionStart',\n                data: { closing: true },\n                target: route.key,\n              });\n            }}\n            onAppear={() => {\n              navigation.emit({\n                type: 'transitionEnd',\n                data: { closing: false },\n                target: route.key,\n              });\n            }}\n            onDisappear={() => {\n              navigation.emit({\n                type: 'transitionEnd',\n                data: { closing: true },\n                target: route.key,\n              });\n            }}\n            onDismissed={() => {\n              navigation.dispatch({\n                ...StackActions.pop(),\n                source: route.key,\n                target: state.key,\n              });\n            }}\n          >\n            <HeaderConfig\n              {...options}\n              route={route}\n              headerShown={isHeaderInPush}\n              headerTopInsetEnabled={\n                options.headerTopInsetEnabled ?? insets.top !== 0\n              }\n            />\n            <MaybeNestedStack\n              options={options}\n              route={route}\n              presentation={presentation}\n            >\n              {renderScene()}\n            </MaybeNestedStack>\n          </Screen>\n        );\n      })}\n    </ScreenStack>\n  );\n}\n\nexport default function NativeStackView(props: Props) {\n  return (\n    <SafeAreaProviderCompat>\n      <NativeStackViewInner {...props} />\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]}